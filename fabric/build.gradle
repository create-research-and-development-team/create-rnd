plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle"
    id "com.modrinth.minotaur"
}

apply from: '../gradle-scripts/publish-curseforge.gradle'

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common
            developmentFabric.extendsFrom common
}

repositories {
    if (!project.block_external_repositories) {
        maven { url = "https://api.modrinth.com/maven" } // LazyDFU, Suggestion Tweaker
        maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu, EMI
        maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
        maven { url = "https://mvn.devos.one/snapshots/" } // Create, Porting Lib, Forge Tags, Milk Lib
        maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // Forge Config API Port
        maven { url = "https://maven.tterrag.com/" } // Registrate and Flywheel
        maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
        maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
        maven { url = "https://jitpack.io/" } // Mixin Extras, fabric ASM
        maven { url = "https://dvs1.progwml6.com/files/maven/" } // JEI
        maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
        maven { url = "https://maven.fabricmc.net/" } // Fabric API
    }
}


dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modImplementation("net.fabricmc:fabric-language-kotlin:1.8.5+kotlin.1.7.20")

    // Mod menu
    modImplementation("com.terraformersmc:modmenu:3.2.3")
    modImplementation("me.shedaniel.cloth:cloth-config:${cloth_config_version}")

    // Create compat
    modImplementation("com.simibubi.create:create-fabric-${project.create_minecraft_version}:${project.create_version}+${project.minecraft_version}") { transitive = false }
    modImplementation("com.jozufozu.flywheel:flywheel-fabric-${flywheel_minecraft_version}:${project.flywheel_version}")
    modImplementation("com.tterrag.registrate_fabric:Registrate:${project.registrate_version}")

    //blah
    modImplementation("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version}+${project.minecraft_version}")
    modImplementation("me.alphamode:ForgeTags:${project.forge_tags_version}")
    modImplementation(include("com.electronwill.night-config:core:${project.night_config_core_version}"))
    modImplementation(include("com.electronwill.night-config:toml:${project.night_config_toml_version}"))
    modImplementation("net.minecraftforge:forgeconfigapiport-fabric:${project.forge_config_api_port_version}")
    modImplementation("com.jamieswhiteshirt:reach-entity-attributes:${project.reach_entity_attributes_version}")
    modImplementation("dev.cafeteria:fake-player-api:${project.fake_player_api_version}")
    modImplementation("io.github.tropheusj:milk-lib:${project.milk_lib_version}")
    modImplementation(include("me.luligabi:NoIndium:${project.no_indium_version}"))
    implementation("com.google.code.findbugs:jsr305:${project.jsr305_version}")

    // Remove the next line if you don't want to depend on the API
    modApi("org.valkyrienskies:valkyrienskies-118-fabric:${rootProject.vs2_version}")
    modApi("org.valkyrienskies.eureka:eureka-fabric:${rootProject.eureka_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version, "vs2_version": project.vs2_version.substring(0, project.vs2_version.indexOf('+'))
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
            dependsOn shadowJar
            classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
            from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            groupId = "net.createrndteam.creaternd"
            version = project.version
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        if (System.getenv("GITHUB_ACTOR") != null) {
            println "Publishing to Github Packages"
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/create-research-and-development-team/create-rnd")
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}